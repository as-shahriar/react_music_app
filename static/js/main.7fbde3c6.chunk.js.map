{"version":3,"sources":["Search.jsx","Artist.jsx","Tracks.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","style","margin","type","placeholder","aria-describedby","onChange","onType","onKeyPress","onKeyPressed","id","color","onClick","onSearch","Artist","artist","name","images","followers","genres","src","url","alt","align","total","map","genre","key","Tracks","state","audio","playing","preview_url","play_song","pause","setState","Audio","play","icon","track","tracks","this","album","Component","App","search","API_URL","event","target","value","fetch","then","response","json","artists","items","catch","error","alert","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7fbde3c6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Search = props => {\r\n  return (\r\n    <div className=\"input-group my-3 search\" style={{ margin: \"0 auto\" }}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Search Here\"\r\n        aria-describedby=\"basic-addon2\"\r\n        onChange={props.onType}\r\n        onKeyPress={props.onKeyPressed}\r\n      />\r\n      <div className=\"input-group-append\">\r\n        <span\r\n          className=\"btn btn-warning\"\r\n          id=\"basic-addon2\"\r\n          style={{ color: \"white\" }}\r\n          onClick={props.onSearch}\r\n        >\r\n          Search\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Artist = props => {\r\n  if (!props.artist) return null;\r\n  const { name, images, followers, genres } = props.artist;\r\n\r\n  return (\r\n    <div className=\"track-div\">\r\n      <img\r\n        src={images[0].url}\r\n        alt=\"Artist\"\r\n        className=\"rounded mx-auto d-block img-fluid w-25\"\r\n      />\r\n      <h2 align=\"center\" className=\"mt-2\">{name}</h2>\r\n      <p align=\"center\">{`${followers.total} followers`}</p>\r\n      <div className=\"d-flex justify-content-center\">\r\n        {genres.map(genre => {\r\n          return (\r\n            <span key={genre} className=\"badge badge-success m-1\">\r\n              {genre}\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Artist;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Tracks extends Component {\r\n  state = { audio: null, playing: false, preview_url: null };\r\n\r\n  play_song = preview_url => {\r\n    if (this.state.playing) {\r\n      this.state.audio.pause();\r\n      this.setState({ playing: false });\r\n      if (preview_url === this.state.preview_url) return;\r\n    }\r\n    const audio = new Audio(preview_url);\r\n    audio.play();\r\n    this.setState({ audio, playing: true, preview_url });\r\n  };\r\n\r\n  icon = track => {\r\n    if (!track.preview_url) {\r\n      return null;\r\n    }\r\n    if (this.state.playing && track.preview_url === this.state.preview_url) {\r\n      return <span id=\"play-icon\">| |</span>;\r\n    } else {\r\n      return <span id=\"play-icon\">&#9654;</span>;\r\n    }\r\n  };\r\n  render() {\r\n    const { tracks } = this.props;\r\n    if (!tracks) return null;\r\n    return (\r\n      <div className=\"row\">\r\n        {tracks.map(track => {\r\n          const { id, name, album, preview_url } = track;\r\n          return (\r\n            <div\r\n              key={id}\r\n              className=\"track\"\r\n              onClick={() => {\r\n                this.play_song(preview_url);\r\n              }}\r\n            >\r\n              <img\r\n                src={album.images[0].url}\r\n                alt=\"track\"\r\n                className=\"rounded mx-auto\"\r\n              />\r\n              <h6 align=\"center\" className=\"track-text\">\r\n                {name}\r\n              </h6>\r\n              <p>{this.icon(track)}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tracks;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport Artist from \"./Artist\";\nimport Tracks from \"./Tracks\";\n\nclass App extends Component {\n  state = {\n    search: null,\n    artist: null,\n    tracks: null\n  };\n\n  API_URL = \"https://spotify-api-wrapper.appspot.com/artist/\";\n  onType = event => {\n    this.setState({ search: event.target.value });\n  };\n\n  onKeyPressed = event => {\n    if (event.key === \"Enter\") {\n      this.onSearch();\n    }\n  };\n\n  onSearch = () => {\n    fetch(`${this.API_URL}${this.state.search}`)\n      .then(response => response.json())\n      .then(json => {\n        if (json.artists.total > 0) {\n          const artist = json.artists.items[0];\n          this.setState({ artist });\n\n          fetch(`${this.API_URL}${artist.id}/top-tracks`)\n            .then(response => response.json())\n            .then(json => this.setState({ tracks: json.tracks }))\n            .catch(error => alert(error.message));\n        }\n      })\n      .catch(error => alert(error.message));\n  };\n\n  state = {};\n  render() {\n    return (\n      <div className=\"container mb-4\">\n        <h3 align=\"center\" className=\"mt-3\">\n          React Music App\n        </h3>\n        <Search\n          onType={this.onType}\n          onSearch={this.onSearch}\n          onKeyPressed={this.onKeyPressed}\n        />\n\n        <Artist artist={this.state.artist} />\n        <Tracks tracks={this.state.tracks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}